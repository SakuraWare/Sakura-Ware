-- Lotus Ware --

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/deividcomsono/Obsidian/refs/heads/main/Library.lua"))()

if Library.IsMobile then
    Library:SetDPIScale(75)
end

local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local success, info = pcall(function()
    return MarketplaceService:GetProductInfo(game.PlaceId)
end)

local gameName = success and info.Name or "Unknown Game"

local Window = Library:CreateWindow({
    Title = "Lotus Ware",
    Footer = gameName,
    Icon = 102396476803448,
    ToggleKeybind = Enum.KeyCode.LeftControl,
    Center = true,
    AutoShow = true,
    ShowCustomCursor = false,
    MobileButtonsSide = "Left"
})

-- TABS --
local MainTab = Window:AddTab("Main", "zap")
local TeleportTab = Window:AddTab("Teleport", "rotate-cw")
local MiscTab = Window:AddTab("Misc", "user")
local InfoTab = Window:AddTab("Info", "info")
local SettingsTab = Window:AddTab("Setting", "settings")

-- PRODUCT SECTION --
local ProductSection = MainTab:AddLeftGroupbox("Products")
local StatsSection = MainTab:AddRightGroupbox("Stats")

local productList = {}
local productNames = {}
local selectedProductId = nil
local autoBuyEnabled = false
local purchaseCount = 0

local expensiveLabel = StatsSection:AddLabel("Most Expensive:\nLoading...")
local cheapLabel = StatsSection:AddLabel("Cheapest Product:\nLoading...")
local purchaseLabel = StatsSection:AddLabel("Products Purchased: 0")
local totalProductsLabel = StatsSection:AddLabel("Total Products: 0")

local function updateStats()
    if #productList > 0 then
        local mostExpensive = productList[1]
        local cheapest = productList[1]

        for _, product in ipairs(productList) do
            if product.price > mostExpensive.price then
                mostExpensive = product
            end
            if product.price < cheapest.price then
                cheapest = product
            end
        end

        expensiveLabel:SetText("Most Expensive:\n" .. mostExpensive.name)
        cheapLabel:SetText("Cheapest Product:\n" .. cheapest.name)
    else
        expensiveLabel:SetText("Most Expensive:\nNo products found")
        cheapLabel:SetText("Cheapest Product:\nNo products found")
    end
    purchaseLabel:SetText("Products Purchased: " .. purchaseCount)
    totalProductsLabel:SetText("Total Products: " .. #productList)
end

local Dropdown = ProductSection:AddDropdown("Select Product", {
    Values = {"Loading..."},
    Default = 1,
    Multi = false,
    Text = "Select Product",
    Callback = function(selected)
        for _, product in ipairs(productList) do
            if product.name == selected then
                selectedProductId = product.id
                break
            end
        end
    end
})

local function fetchProducts()
    productList = {}
    productNames = {}

    local pages = MarketplaceService:GetDeveloperProductsAsync()
    for _, product in pairs(pages:GetCurrentPage()) do
        table.insert(productList, {id = product.ProductId, name = product.Name, price = product.PriceInRobux or 0})
        table.insert(productNames, product.Name)
    end

    Dropdown:SetValues(productNames)
    updateStats()
end

ProductSection:AddButton("Refresh", function()
    fetchProducts()
    Library:Notify("Dropdown refreshed", 2)
end)

ProductSection:AddButton("Buy Product", function()
    if selectedProductId then
        MarketplaceService:SignalPromptProductPurchaseFinished(player.UserId, selectedProductId, true)
        purchaseCount = purchaseCount + 1
        updateStats()
    else
        Library:Notify("Please select something.", 3)
    end
end)

ProductSection:AddButton("Buy All Products", function()
    if #productList > 0 then
        for _, product in ipairs(productList) do
            MarketplaceService:SignalPromptProductPurchaseFinished(player.UserId, product.id, true)
            purchaseCount = purchaseCount + 1
        end
        updateStats()
    else
        Library:Notify("No products found", 3)
    end
end)

ProductSection:AddToggle("Auto Buy Selected", {Text = "Auto Buy Selected", Default = false, Callback = function(state)
    autoBuyEnabled = state
    if autoBuyEnabled then
        task.spawn(function()
            while autoBuyEnabled do
                if selectedProductId then
                    MarketplaceService:SignalPromptProductPurchaseFinished(player.UserId, selectedProductId, true)
                    purchaseCount = purchaseCount + 1
                    updateStats()
                end
                task.wait(1)
            end
        end)
    end
end})

ProductSection:AddButton("Copy Selected Product ID", function()
    if selectedProductId then
        local success = pcall(function()
            setclipboard(tostring(selectedProductId))
        end)
        if success then
            Library:Notify("Product ID copied to clipboard", 3)
        else
            print("Product ID:", selectedProductId)
            Library:Notify("Executor does not support clipboard.", 3)
        end
    else
        Library:Notify("No product selected", 2)
    end
end)

fetchProducts()
