-- Lotus Ware --

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/deividcomsono/Obsidian/refs/heads/main/Library.lua"))()

if Library.IsMobile then
    Library:SetDPIScale(75)
end

local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local success, info = pcall(function()
    return MarketplaceService:GetProductInfo(game.PlaceId)
end)

local gameName = success and info.Name or "Unknown Game"

local Window = Library:CreateWindow({
    Title = "Lotus Ware",
    Footer = gameName,
    Icon = 102396476803448,
    ToggleKeybind = Enum.KeyCode.LeftControl,
    Center = true,
    AutoShow = true,
    ShowCustomCursor = false,
    MobileButtonsSide = "Left"
})

-- TABS --
local MainTab = Window:AddTab("Main", "zap")
local TeleportTab = Window:AddTab("Teleport", "rotate-cw")
local MiscTab = Window:AddTab("Misc", "user")
local InfoTab = Window:AddTab("Info", "info")
local SettingsTab = Window:AddTab("Setting", "settings")

-- PRODUCT SECTION --
local ProductSection = MainTab:AddLeftGroupbox("Products")
local StatsSection = MainTab:AddRightGroupbox("Stats")

local productList = {}
local productNames = {}
local selectedProductId = nil
local autoBuyEnabled = false
local purchaseCount = 0

local expensiveLabel = StatsSection:AddLabel("Most Expensive:\nLoading...")
local cheapLabel = StatsSection:AddLabel("Cheapest Product:\nLoading...")
local purchaseLabel = StatsSection:AddLabel("Products Purchased: 0")
local totalProductsLabel = StatsSection:AddLabel("Total Products: 0")

local function updateStats()
    if #productList > 0 then
        local mostExpensive = productList[1]
        local cheapest = productList[1]

        for _, product in ipairs(productList) do
            if product.price > mostExpensive.price then
                mostExpensive = product
            end
            if product.price < cheapest.price then
                cheapest = product
            end
        end

        expensiveLabel:SetText("Most Expensive:\n" .. mostExpensive.name .. " (" .. mostExpensive.price .. " R$)")
        cheapLabel:SetText("Cheapest Product:\n" .. cheapest.name .. " (" .. cheapest.price .. " R$)")
    else
        expensiveLabel:SetText("Most Expensive:\nNo products found")
        cheapLabel:SetText("Cheapest Product:\nNo products found")
    end
    purchaseLabel:SetText("Products Purchased: " .. purchaseCount)
    totalProductsLabel:SetText("Total Products: " .. #productList)
end

local Dropdown = ProductSection:AddDropdown("Select Product", {
    Values = {"Loading..."},
    Default = 1,
    Multi = false,
    Text = "Select Product",
    Callback = function(selected)
        for _, product in ipairs(productList) do
            if product.name == selected then
                selectedProductId = product.id
                break
            end
        end
    end
})

local function fetchProducts()
    productList = {}
    productNames = {}

    local pages = MarketplaceService:GetDeveloperProductsAsync()
    for _, product in pairs(pages:GetCurrentPage()) do
        local price = product.PriceInRobux
        if price ~= nil then
            table.insert(productList, {id = product.ProductId, name = product.Name, price = price})
            table.insert(productNames, product.Name)
        end
    end

    Dropdown:SetValues(productNames)
    updateStats()
end

ProductSection:AddButton("Refresh", function()
    fetchProducts()
    Library:Notify("Dropdown refreshed", 2)
end)

ProductSection:AddButton("Buy Product", function()
    if selectedProductId then
        MarketplaceService:SignalPromptProductPurchaseFinished(player.UserId, selectedProductId, true)
        purchaseCount = purchaseCount + 1
        updateStats()
    else
        Library:Notify("Please select something.", 3)
    end
end)

ProductSection:AddButton("Buy All Products", function()
    if #productList > 0 then
        for _, product in ipairs(productList) do
            MarketplaceService:SignalPromptProductPurchaseFinished(player.UserId, product.id, true)
            purchaseCount = purchaseCount + 1
        end
        updateStats()
    else
        Library:Notify("No products found", 3)
    end
end)

ProductSection:AddToggle("Auto Buy Selected", {
    Text = "Auto Buy Selected",
    Default = false,
    Callback = function(state)
        autoBuyEnabled = state
        if autoBuyEnabled then
            task.spawn(function()
                while autoBuyEnabled do
                    if selectedProductId then
                        MarketplaceService:SignalPromptProductPurchaseFinished(player.UserId, selectedProductId, true)
                        purchaseCount = purchaseCount + 1
                        updateStats()
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

ProductSection:AddButton("Copy Selected Product ID", function()
    if selectedProductId then
        local success = pcall(function()
            setclipboard(tostring(selectedProductId))
        end)
        if success then
            Library:Notify("Product ID copied to clipboard", 3)
        else
            print("Product ID:", selectedProductId)
            Library:Notify("Executor does not support clipboard.", 3)
        end
    else
        Library:Notify("No product selected", 2)
    end
end)

fetchProducts()

-- MISC TAB --
local SpeedGroupbox = MiscTab:AddLeftGroupbox("Walk Speed")

SpeedGroupbox:AddButton({
    Text = "Reset Walk Speed",
    Func = function()
        player.Character.Humanoid.WalkSpeed = 16
    end
})

SpeedGroupbox:AddInput("WalkSpeedInput", {
    Text = "Walk Speed",
    Default = "16",
    Numeric = true,
    Finished = true,
    Placeholder = "Enter walk speed...",
    Callback = function(Value)
        local num = tonumber(Value)
        if num then
            player.Character.Humanoid.WalkSpeed = num
        end
    end
})

local JumpGroupbox = MiscTab:AddRightGroupbox("Jump Power")

JumpGroupbox:AddButton({
    Text = "Reset Jump Power",
    Func = function()
        player.Character.Humanoid.JumpPower = 50
    end
})

JumpGroupbox:AddInput("JumpPowerInput", {
    Text = "Jump Power",
    Default = "50",
    Numeric = true,
    Finished = true,
    Placeholder = "Enter jump power...",
    Callback = function(Value)
        local num = tonumber(Value)
        if num then
            player.Character.Humanoid.JumpPower = num
        end
    end
})

local YieldGroupbox = MiscTab:AddLeftGroupbox("Admin Commands")

YieldGroupbox:AddButton({
    Text = "Infinite Yield",
    Description = "Universal Admin",
    Func = function()
        loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'), true))()
    end
})

local ServerGroupbox = MiscTab:AddRightGroupbox("Server")

ServerGroupbox:AddButton({
    Text = "Server Hop",
    Func = function()
        Library:CreateNotification(
            "Confirmation",
            "Hop to a new server?",
            5,
            {"Yes", "No"},
            {
                function()
                    Library:CreateNotification("Looking For a new server...", "Please wait..", 10)
                    serverHop()
                end,
                nil
            }
        )
    end,
    DoubleClick = false
})


-- INFO TAB --
local LeftInfo = InfoTab:AddLeftGroupbox("Info")
local RightInfo = InfoTab:AddRightGroupbox("More Info")

RightInfo:AddLabel("Discord: aufgebraucht")
RightInfo:AddButton({
    Text = "Copy Discord Server Link",
    Func = function()
        setclipboard("https://discord.gg/FenatylHub")
    end
})

RightInfo:AddLabel("Best Universal Script")
RightInfo:AddLabel("Lotus Ware v1.0")
LeftInfo:AddLabel("Open/Close With Left Control")

-- SETTINGS TAB --
local SettingsGroupbox = SettingsTab:AddLeftGroupbox("Setting")

SettingsGroupbox:AddDropdown("DpiDropdown", {
    Values = {"50", "75", "100", "125", "150"},
    Default = 3,
    Multi = false,
    Text = "Change DPI",
    Tooltip = "What DPI?",
    Callback = function(scale)
        Library:SetDPIScale(tonumber(scale))
    end
})

SettingsGroupbox:AddButton({
    Text = "Unload Menu",
    Func = function()
        Library:Notify("Unloading", 0.5)
        task.wait(0.7)
        Library:Unload()
    end
})
